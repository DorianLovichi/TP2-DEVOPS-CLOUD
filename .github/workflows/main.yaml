name: CI/CD Pipeline for EC2

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  AWS_REGION: eu-north-1
  ECR_REPOSITORY: campaign-manager
  EC2_INSTANCE_ID: i-01ca099839bc9605a # Remplace par l'ID de ton EC2
  EC2_SSH_KEY_NAME: C:\Users\doria\.ssh\TP2_cloud # Remplace par le nom de ta clÃ© SSH EC2

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13.3"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
          if [ -f backend/test-requirements.txt ]; then pip install -r backend/test-requirements.txt; fi
          pip install moto pytest-flask flake8

      - name: Lint with flake8
        run: |
          flake8 backend --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 backend --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: pytest

  build-and-push:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create ECR repository if it doesn't exist
        run: |
          if ! aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} 2>/dev/null; then
            echo "Creating ECR repository ${{ env.ECR_REPOSITORY }}..."
            aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}
          else
            echo "ECR repository ${{ env.ECR_REPOSITORY }} already exists."
          fi

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: SSH into EC2 and deploy Docker container
        run: |
          # Get the public IP of your EC2 instance
          EC2_PUBLIC_IP=$(aws ec2 describe-instances --instance-ids ${{ env.EC2_INSTANCE_ID }} --query "Reservations[0].Instances[0].PublicIpAddress" --output text)

          # SSH into EC2 instance and pull the latest image from ECR
          ssh -i ${{ secrets.EC2_SSH_PRIVATE_KEY }} ec2-user@$EC2_PUBLIC_IP << 'EOF'
            # Install Docker if not installed
            if ! command -v docker &> /dev/null; then
              sudo yum update -y
              sudo amazon-linux-extras install docker
              sudo service docker start
              sudo usermod -a -G docker ec2-user
            fi

            # Login to Amazon ECR
            $(aws ecr get-login --no-include-email --region ${{ env.AWS_REGION }})

            # Pull the Docker image from ECR
            docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

            # Stop and remove any existing container
            docker stop campaign-manager || true
            docker rm campaign-manager || true

            # Run the container
            docker run -d --name campaign-manager -p 80:5000 ${ECR_REGISTRY}/${ECR_REPOSITORY}:${GITHUB_SHA}

            # Check if the container is running
            docker ps
          EOF
