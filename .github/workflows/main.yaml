name: CI/CD Pipeline for EKS

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: campaign-manager
  EKS_CLUSTER_NAME: campaign-manager-cluster
  KUBERNETES_NAMESPACE: campaign-manager

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13.3"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
          if [ -f backend/test-requirements.txt ]; then pip install -r backend/test-requirements.txt; fi
          pip install moto pytest-flask flake8

      - name: Lint with flake8
        run: |
          flake8 backend --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 backend --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: pytest

  build-and-push:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create ECR repository if it doesn't exist
        run: |
          if ! aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} 2>/dev/null; then
            echo "Creating ECR repository ${{ env.ECR_REPOSITORY }}..."
            aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}
          else
            echo "ECR repository ${{ env.ECR_REPOSITORY }} already exists."
          fi

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  # Le job deploy est désactivé temporairement jusqu'à ce que les permissions EKS soient configurées
  # Pour l'activer, supprimez simplement la ligne "if: ${{ false }}" ci-dessous
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: ${{ false }} # Désactiver le déploiement jusqu'à ce que les permissions soient configurées

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Check if EKS cluster exists
        id: check-eks
        continue-on-error: true
        run: |
          if aws eks describe-cluster --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }} 2>/dev/null; then
            echo "Cluster ${{ env.EKS_CLUSTER_NAME }} exists, continuing with deployment."
            echo "cluster_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Cluster ${{ env.EKS_CLUSTER_NAME }} does not exist or you don't have permission to access it."
            echo "cluster_exists=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Setup kubectl
        if: steps.check-eks.outputs.cluster_exists == 'true'
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.29.0"

      - name: Update kube config
        if: steps.check-eks.outputs.cluster_exists == 'true'
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Deploy to EKS
        if: steps.check-eks.outputs.cluster_exists == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Create namespace if doesn't exist
          kubectl create namespace ${{ env.KUBERNETES_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

          # Create Kubernetes deployment YAML dynamically
          cat > k8s-deployment.yaml << EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: campaign-manager
            labels:
              app: campaign-manager
          spec:
            replicas: 3
            selector:
              matchLabels:
                app: campaign-manager
            template:
              metadata:
                labels:
                  app: campaign-manager
              spec:
                containers:
                - name: campaign-manager
                  image: ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
                  ports:
                  - containerPort: 5000
                  env:
                  - name: DYNAMODB_TABLE
                    value: "Campaigns"
                  - name: AWS_REGION
                    value: "${{ env.AWS_REGION }}"
          EOF

          # Create Kubernetes service YAML dynamically
          cat > k8s-service.yaml << EOF
          apiVersion: v1
          kind: Service
          metadata:
            name: campaign-manager
            labels:
              app: campaign-manager
          spec:
            type: LoadBalancer
            ports:
            - port: 80
              targetPort: 5000
              protocol: TCP
            selector:
              app: campaign-manager
          EOF

          # Apply Kubernetes manifests
          kubectl apply -f k8s-deployment.yaml -n ${{ env.KUBERNETES_NAMESPACE }}
          kubectl apply -f k8s-service.yaml -n ${{ env.KUBERNETES_NAMESPACE }}

          # Wait for deployment to be ready
          kubectl rollout status deployment/campaign-manager -n ${{ env.KUBERNETES_NAMESPACE }}

          # Get service URL
          echo "Service URL:"
          kubectl get svc campaign-manager -n ${{ env.KUBERNETES_NAMESPACE }}
