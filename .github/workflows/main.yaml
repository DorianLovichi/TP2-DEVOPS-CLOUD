name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13.3"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
          if [ -f backend/test-requirements.txt ]; then pip install -r backend/test-requirements.txt; fi
          if [ -f backend/test_requierements.txt ]; then pip install -r backend/test_requierements.txt; fi
          # Installer moto explicitement pour s'assurer qu'il est disponible
          pip install moto pytest-flask

      - name: Lint with flake8
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 backend --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 backend --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          pytest

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Verify AWS credentials availability
        run: |
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "AWS_ACCESS_KEY_ID is not set. Please add it to your GitHub secrets."
            exit 1
          fi
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "AWS_SECRET_ACCESS_KEY is not set. Please add it to your GitHub secrets."
            exit 1
          fi
          echo "AWS credentials are available."

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Verify AWS CLI configuration
        run: |
          aws sts get-caller-identity || echo "AWS CLI verification failed"

      - name: List available solution stacks and save to a file
        run: |
          aws elasticbeanstalk list-available-solution-stacks --query "SolutionStacks[?contains(@, 'Python')]" --output text > python_stacks.txt
          echo "Available Python Solution Stacks:"
          cat python_stacks.txt

      - name: Select a Python solution stack
        id: select_stack
        run: |
          # Essayer d'abord les stacks récentes Python 3.11 sur Amazon Linux 2023
          if grep -q "64bit Amazon Linux 2023.*Python 3.11" python_stacks.txt; then
            STACK=$(grep "64bit Amazon Linux 2023.*Python 3.11" python_stacks.txt | head -1)
          # Sinon essayer Python 3.8 sur Amazon Linux 2023
          elif grep -q "64bit Amazon Linux 2023.*Python 3.8" python_stacks.txt; then
            STACK=$(grep "64bit Amazon Linux 2023.*Python 3.8" python_stacks.txt | head -1)
          # Sinon essayer Python 3.8 sur Amazon Linux 2
          elif grep -q "64bit Amazon Linux 2.*Python 3.8" python_stacks.txt; then
            STACK=$(grep "64bit Amazon Linux 2.*Python 3.8" python_stacks.txt | head -1)
          # Sinon prendre la première stack Python disponible
          else
            STACK=$(head -1 python_stacks.txt)
          fi
          echo "Selected stack: $STACK"
          echo "stack=$STACK" >> $GITHUB_OUTPUT

      - name: Check if Elastic Beanstalk application exists
        id: check_app
        run: |
          if aws elasticbeanstalk describe-applications --application-names campaign-manager 2>/dev/null; then
            echo "Application exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Application does not exist"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Elastic Beanstalk application if it doesn't exist
        if: steps.check_app.outputs.exists == 'false'
        run: |
          aws elasticbeanstalk create-application --application-name campaign-manager

      - name: Create Elastic Beanstalk environment if needed
        id: check_env
        run: |
          if ! aws elasticbeanstalk describe-environments --environment-names campaign-manager-env --application-name campaign-manager | grep -q "campaign-manager-env"; then
            echo "Creating new environment"
            aws elasticbeanstalk create-environment \
              --application-name campaign-manager \
              --environment-name campaign-manager-env \
              --solution-stack-name "${{ steps.select_stack.outputs.stack }}" \
              --option-settings file://ebconfig.json
          fi

      - name: Prepare deployment package
        run: |
          zip -r deploy.zip . -x "*.git*" "*.github*" "node_modules/*" "__pycache__/*" "*.pyc" "*.pyo" "*.pyd" "venv/*" "env/*"

      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: campaign-manager
          environment_name: campaign-manager-env
          version_label: ${{ github.sha }}
          region: us-east-1
          deployment_package: deploy.zip
